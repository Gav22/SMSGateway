/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SMSsender;

import static SMSsender.SMSsender.outputStream;
import static SMSsender.SMSsender.serialPort;
//import javax.comm.*;
import gnu.io.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import model.Messages;

/**
 *
 * @author chellin
 */
public class SMSPanel extends javax.swing.JFrame {

    static Enumeration portList;
    static CommPortIdentifier portId;
    static SerialPort serialPort;
    static OutputStream outputStream;
    static InputStream inputStream;
    static char enter = 13;
    static char CTRLZ = 26;

    static String selectedPort = "/dev/ttyUSB0";
    static String messageString1 = "AT";
    static String messageString3 = "AT+CMGF=1";
    static String messageString4 = "AT+CMGS=\"+6289603383151\"";
    static String messageString5 = "test sms using java dekstop";

    /**
     * Creates new form SMSPanel
     */
    public SMSPanel() {
        initComponents();
        System.out.println("masuk constructor");
//        portCombo = new JComboBox<>();
        portCombo.removeAllItems();
        portList = CommPortIdentifier.getPortIdentifiers();
        while (portList.hasMoreElements()) {
            System.out.println("masuk while costructor");
            portId = (CommPortIdentifier) portList.nextElement();
            System.out.println("port id: " + portId.getName());
            if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                System.out.println("masuk if");
                portCombo.addItem(portId.getName());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        sendSMSPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messagesTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        recipientTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        inboxPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        inboxTextArea = new javax.swing.JTextArea();
        refreshInboxButton = new javax.swing.JButton();
        outboxPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        outboxTextArea = new javax.swing.JTextArea();
        refreshOutboxButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        portCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        messagesTextArea.setColumns(20);
        messagesTextArea.setRows(5);
        jScrollPane1.setViewportView(messagesTextArea);

        jLabel3.setText("messages:");

        recipientTextArea.setColumns(20);
        recipientTextArea.setRows(5);
        jScrollPane2.setViewportView(recipientTextArea);

        jLabel4.setText("recipient:");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel5.setText("use \";\" as separator for many recipients");

        sendButton.setText("SEND");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel6.setText("use international format phone number (+62) for Indonesia");

        javax.swing.GroupLayout sendSMSPanelLayout = new javax.swing.GroupLayout(sendSMSPanel);
        sendSMSPanel.setLayout(sendSMSPanelLayout);
        sendSMSPanelLayout.setHorizontalGroup(
            sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sendSMSPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sendButton)
                .addGap(51, 51, 51))
            .addGroup(sendSMSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sendSMSPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 234, Short.MAX_VALUE))
                    .addGroup(sendSMSPanelLayout.createSequentialGroup()
                        .addGroup(sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(sendSMSPanelLayout.createSequentialGroup()
                                .addGroup(sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        sendSMSPanelLayout.setVerticalGroup(
            sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendSMSPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sendSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(3, 3, 3)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sendButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Send SMS", sendSMSPanel);

        inboxTextArea.setColumns(20);
        inboxTextArea.setRows(5);
        jScrollPane3.setViewportView(inboxTextArea);

        refreshInboxButton.setText("Refresh Inbox");
        refreshInboxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshInboxButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inboxPanelLayout = new javax.swing.GroupLayout(inboxPanel);
        inboxPanel.setLayout(inboxPanelLayout);
        inboxPanelLayout.setHorizontalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addGroup(inboxPanelLayout.createSequentialGroup()
                        .addComponent(refreshInboxButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        inboxPanelLayout.setVerticalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshInboxButton)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inbox", inboxPanel);

        outboxTextArea.setColumns(20);
        outboxTextArea.setRows(5);
        jScrollPane4.setViewportView(outboxTextArea);

        refreshOutboxButton.setText("Refresh Outbox");
        refreshOutboxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshOutboxButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outboxPanelLayout = new javax.swing.GroupLayout(outboxPanel);
        outboxPanel.setLayout(outboxPanelLayout);
        outboxPanelLayout.setHorizontalGroup(
            outboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addGroup(outboxPanelLayout.createSequentialGroup()
                        .addComponent(refreshOutboxButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        outboxPanelLayout.setVerticalGroup(
            outboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshOutboxButton)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Outbox", outboxPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        jLabel2.setText("SMS Gateway Java");

        portCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Select Port: ");

        connectButton.setText("CONNECT");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(146, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(134, 134, 134))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(connectButton)
                .addGap(46, 46, 46))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(portCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addContainerGap(334, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 110, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshInboxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshInboxButtonActionPerformed
        // TODO add your handling code here:
        checkInbox();
    }//GEN-LAST:event_refreshInboxButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        portList = CommPortIdentifier.getPortIdentifiers();

        while (portList.hasMoreElements()) {
            portId = (CommPortIdentifier) portList.nextElement();
            if (portId.getName().equals(portCombo.getSelectedItem().toString())) {
                try {
                    serialPort = (SerialPort) portId.open("ttyUSB0", 2000);
                    outputStream = serialPort.getOutputStream();
                    inputStream = serialPort.getInputStream();

                    serialPort.setSerialPortParams(115200,
                            SerialPort.DATABITS_8,
                            SerialPort.STOPBITS_1,
                            SerialPort.PARITY_NONE);
                } catch (PortInUseException e) {
                    System.out.println("err");
                } catch (IOException ex) {
                    Logger.getLogger(SMSsender.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedCommOperationException ex) {
                    Logger.getLogger(SMSsender.class.getName()).log(Level.SEVERE, null, ex);
                }

                JOptionPane.showMessageDialog(this, "Connected to Port: " + portCombo.getSelectedItem().toString());

            }
        }
        File file = new File("/var/lock/LCK..ttyUSB"+portCombo.getSelectedItem().toString().substring(portCombo.getSelectedItem().toString().length()-1));
        if(file.delete()){
            System.out.println(file.getName() + " is deleted!");
        }else{
            System.out.println("Delete operation is failed.");
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        String[] recipientArray;

        recipientArray = recipientTextArea.getText().split(";");

        portList = CommPortIdentifier.getPortIdentifiers();

        while (portList.hasMoreElements()) {
            System.out.println("masuk while button");
            portId = (CommPortIdentifier) portList.nextElement();
            if (portId.getName().equals(portCombo.getSelectedItem().toString())) {

                for (int i = 0; i < recipientArray.length; i++) {
                    sendSMS(recipientArray[i]);
                }
                try {
                    Thread.sleep(3000);
                    outputStream.close();
                    serialPort.close();
                } catch (InterruptedException ex) {
                    Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_sendButtonActionPerformed

    private void refreshOutboxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshOutboxButtonActionPerformed
        // TODO add your handling code here:
        checkOutbox();
    }//GEN-LAST:event_refreshOutboxButtonActionPerformed

    public void checkInbox() {
        ArrayList<Messages> messagesList = new ArrayList<>();
            System.out.println("masuk check inbox");
        try {
            messagesList = SMSCommand.getAllInbox();
        } catch (SQLException ex) {
            Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < messagesList.size(); i++) {
            
            sb.append("id: "+messagesList.get(i).getId()+"\n");
            sb.append("msg: "+messagesList.get(i).getMessages()+"\n");
            sb.append("to: "+messagesList.get(i).getRecipient()+"\n");
            sb.append("from: "+messagesList.get(i).getSender()+"\n");
            sb.append("time: "+messagesList.get(i).getTime()+"\n");
            sb.append("-----------------------------------------"+"\n");
        }
        inboxTextArea.setText(sb.toString());
    }
    public void checkOutbox() {
        ArrayList<Messages> messagesList = new ArrayList<>();
            System.out.println("masuk check outbox");
        try {
            messagesList = SMSCommand.getAllOutbox();
        } catch (SQLException ex) {
            Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < messagesList.size(); i++) {
            
            sb.append("id: "+messagesList.get(i).getId()+"\n");
            sb.append("msg: "+messagesList.get(i).getMessages()+"\n");
            sb.append("to: "+messagesList.get(i).getRecipient()+"\n");
            sb.append("from: "+messagesList.get(i).getSender()+"\n");
            sb.append("time: "+messagesList.get(i).getTime()+"\n");
            sb.append("-----------------------------------------"+"\n");
        }
        outboxTextArea.setText(sb.toString());
    }

    private static String getInputStream(InputStream is) {
        String line = "";

        try {
            is = serialPort.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            
            line = reader.readLine();

            while (line != null) {

                System.out.println(line);
                break;
            }
            if (line.contains("SM")) {
                System.out.println("line di sontains sm: "+line);
                System.out.println("if it contains SM");
                String messagepos = line.substring(6);
                System.out.println("line setelah substring: "+messagepos);
                System.out.println(messagepos);

                String recievedmessage = "AT +CMGR=" + messagepos + "\r\n";

                outputStream = serialPort.getOutputStream();
                outputStream.write(recievedmessage.getBytes());
                outputStream.write(13);

            }
            if (line.contains("REC")) {
                System.out.println("**********REC Data*************");

                System.out.println(line);

            }
        } catch (IOException ex) {
            Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        return line;

    }

    private static String getStringFromInputStream(InputStream is) {

        BufferedReader br = null;
        StringBuilder sb = new StringBuilder();

        try {
        String line;
        br = new BufferedReader(new InputStreamReader(is));
        
            while ((line = br.readLine()) != null) {
                System.out.println("line: " + line);
                System.out.println("br: " + br.readLine());
                sb.append(line);
            }
//            while (br.readLine() != )
        } catch (IOException ex) {
            Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (br != null) {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return sb.toString();

    }

    public void sendSMS(String recipient) {
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date dateobj = new Date();
        System.out.println("tanggal: "+df.format(dateobj));
        Messages message = new Messages("", df.format(dateobj), "", recipient, messagesTextArea.getText(), "");
        
        System.out.println("recipient di sendSMS= " + recipient);
        System.out.println("masuk sendSMS()");
        try {
            outputStream.write((messageString1 + enter).getBytes());
            Thread.sleep(100);
            outputStream.flush();

            outputStream.write((messageString3 + enter).getBytes());
            Thread.sleep(100);
            outputStream.flush();

            String s = "AT+CMGS=" + '"' + recipient + '"' + enter;
            System.out.println("String = " + s);

            outputStream.write(("AT+CMGS=" + '"' + recipient + '"' + enter).getBytes());
            Thread.sleep(100);
            outputStream.flush();

            outputStream.write((messagesTextArea.getText() + CTRLZ).getBytes());
            outputStream.flush();
            Thread.sleep(100);
        } catch (IOException ex) {
            Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            SMSCommand.insertOutbox(message);
        } catch (SQLException ex) {
            Logger.getLogger(SMSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SMSPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SMSPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SMSPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SMSPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SMSPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel inboxPanel;
    private javax.swing.JTextArea inboxTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea messagesTextArea;
    private javax.swing.JPanel outboxPanel;
    private javax.swing.JTextArea outboxTextArea;
    private javax.swing.JComboBox<String> portCombo;
    private javax.swing.JTextArea recipientTextArea;
    private javax.swing.JButton refreshInboxButton;
    private javax.swing.JButton refreshOutboxButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JPanel sendSMSPanel;
    // End of variables declaration//GEN-END:variables
}
